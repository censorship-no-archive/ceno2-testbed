input {
  file {
    path => ["/home/testbed-data/data/http_reachability_test/*.json"]
    start_position => "beginning"
    type => "http_reachability_test"
    codec => json
    sincedb_path => "/dev/null"
  }
  file {
    path => ["/home/testbed-data/data/nat_detection_test/*.json"]
    start_position => "beginning"
    type => "nat_detection_test"
    codec => json
    sincedb_path => "/dev/null"
  }
  file {
    path => ["/home/testbed-data/data/p2p_bittorrent_test/*.json"]
    start_position => "beginning"
    type => "p2p_bittorrent_test"
    codec => json
    sincedb_path => "/dev/null"
  }
  file {
    path => ["/home/testbed-data/data/http_beacon/http_beacon.log"]
    type => "http_beacon"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  if [type] == "http_beacon" {
    grok {
      match => { "message" => "%{IPORHOST:clientip} - %{HTTPDUSER:auth} \[%{HTTPDATE:timestamp}\]  %{NUMBER:response} \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\" (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} \"(?:%{IPORHOST:forwardedfor}|-)\"" }
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      remove_field => [ "timestamp", "message", "host" ]
      locale => "en"
    }
  } else {
    date {
      match => [ "timestamp", "UNIX" ]
      remove_field => [ "timestamp", "test_name" ]
    }
    date {
      match => [ "time_last", "UNIX" ]
      target => "time_last"
    }
  }
}

output {
  if [type] == "http_beacon" {
    elasticsearch {
      hosts => [ "localhost:9200" ]
      index => "http_beacon"
    }
  } else {
    elasticsearch {
      hosts => [ "localhost:9200" ]
      manage_template => true
      index => "ooni"
      template => "/etc/logstash/templates/ooni.json"
      template_name => "ooni"
      template_overwrite => "true"
    }
  }
  #stdout { codec => rubydebug }
}

