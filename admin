#!/bin/sh
# Several tools to manage the testbed.

TB_WEB_ACCESS_LOG=${TB_WEB_ACCESS_LOG:-/var/log/nginx/vhost-server.testbed/access.log}
TB_OONI_DATA=${TB_OONI_DATA:-/home/ooni/data}
TB_ADMIN_SSH_ID=${TB_ADMIN_SSH_ID:-$HOME/testbed/id_rsa}
TB_PSSH_SSH_OPTS="${TB_PSSH_SSH_OPTS:--o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -i $TB_ADMIN_SSH_ID}"
TB_CONVERTED_OONI_JSON_DIR=${TB_CONVERTED_OONI_JSON_DIR:-/home/ooni/converted-test-results}
JQ=${JQ:-/usr/bin/jq} # need jq 1.5 !

# Make date handling safe.
export LC_TIME=C


# Print oldest-to-newest list of ``UTC_ISO_DATE NODE_ID`` occurrences in the log,
# i.e. show which nodes where available on which days.
nodes_history() {
    sudo cat  "$TB_WEB_ACCESS_LOG" \
        | sed -En 's#^[^[]+\[([0-9]+)/([a-zA-Z]+)/([0-9]+):[^]]+\].*\bGET /addrs/\?n=([-0-9a-f]+)\b.*#\1-\2-\3 \4#p' \
        | { while read l; do echo "$(date -d "${l% *}" -uI) ${l#* }"; done } \
        | sort -u
}

# Print ``n=NODE_ID a=NODE_ADDR1/NODE_PFX1 a=NODE_ADDR2/NODE_PFX2... i4=NODE_PUB_ADDR``
# for each node which reported today.
nodes_addrs() {
    local today=$(date -u +%d/%b/%Y)
    sudo cat "$TB_WEB_ACCESS_LOG" \
        | sed -En 's#^.*\['"$today"'.*GET /addrs/\?(n=.*) HTTP/.*#\1#p' \
        | tr '&' ' ' | sort -k1 -u
}

# Print the cjdns IPv6 address of each node which reported today.
nodes_cjdns_addrs() {
    nodes_addrs | sed -En 's#.*\ba=(fc[^/]+)/.*#\1#p' | sort -u
}

# Print the OnionCat IPv6 address of each node which reported today.
nodes_ocat_addrs() {
    nodes_addrs | sed -En 's#.*\ba=(fd87:d87e:eb43:[^/]+)/.*#\1#p' | sort -u
}

# Execute the given command in each node which reported today.
nodes_exec() {
    local ts=$(date -u +%Y%m%dT%H%M%S)
    # Include the SSH port for IPv6 compatibility, see
    # <https://bugs.debian.org/741537>.
    nodes_ocat_addrs | sed 's/$/:22/' \
        | parallel-ssh -h /dev/stdin -x "$TB_PSSH_SSH_OPTS" -l root -o "out.$ts" -e "err.$ts" -- "$@"
}

# Pack test results and other files useful for their interpretation.
data_pack() {
    local ts=$(date -u +%Y%m%dT%H%M)
    local tmp=$(mktemp -d)
    local data_dir="$tmp/testbed-data,$ts"
    local data_arch="$data_dir.tar.xz" data_comp="--xz"

    mkdir -p "$data_dir"
    ln -s "$TB_WEB_ACCESS_LOG" "$data_dir/web-access.log"
    ln -s "$TB_OONI_DATA/peers.txt" "$data_dir"
    ln -s "$TB_OONI_DATA/archive" "$data_dir/ooni-archive"

    if sudo tar -ch $data_comp -C "$tmp" "$(basename "$data_dir")" > "$data_arch"; then
        local output="$(basename "$data_arch")"
        cp -i "$data_arch" "$output" && echo "$output"
    fi

    rm -rf "$tmp"
}

convert_ooni_json() {
    local indir="$TB_OONI_DATA/archive"
    local outdir=$TB_CONVERTED_OONI_JSON_DIR
    local p2p_test_string="p2p_bittorrent_test"
    local http_test_string="http_reachability_test"
    local nat_test_string="nat_detection_test"

    mkdir -p "${outdir}/${p2p_test_string}" \
             "${outdir}/${http_test_string}" \
             "${outdir}/${nat_test_string}"

    # Start with P2P…
    for ipath in "${indir}"/*-${p2p_test_string}-*; do
        fname=$(basename "$ipath")
        opath="${outdir}/${p2p_test_string}/${fname}"
        if [ ! -f "${opath}" ]; then
            # Note: we eliminate any file where P2P output contains '(null)'
            $JQ -c -S -M '(.test_keys.commands[0].command_stdout|sub("^$"; "{}")|sub(".*(null).*"; "{}"; "m")|fromjson)[] as $e | ($e|del(.type)) + {"event-type": $e.type} + (.test_keys.commands[0] | del(.command_stdout)) + (. | del(.test_keys, .annotations, .measurement_start_time, .test_start_time, .test_helpers, .input_hashes, .options, .id, .input))' "${ipath}" >"${opath}"
        fi
    done

    # HTTP reachability test…
    for ipath in "${indir}"/*-${http_test_string}-*; do
        fname=$(basename "$ipath")
        opath="${outdir}/${http_test_string}/${fname}"
        if [ ! -f "${opath}" ]; then
            $JQ -c -S -M '(.test_keys.requests | foreach .[] as $e (0; . + 1; $e + {"attempt": .})) as $r | ($r | reduce paths(scalars) as $path({}; . + {($path | map(tostring) | join("_") | ascii_downcase): $r | getpath($path)})) + (.test_keys | del(.requests, .socksproxy, .agent, .peer_ts)) + {"timestamp": .test_keys.peer_ts} + (. | del(.test_keys, .annotations, .measurement_start_time, .test_start_time, .test_helpers, .input_hashes, .options, .id, .input))' "${ipath}" >"${opath}"
        fi
    done

    # NAT test…
    for ipath in "${indir}"/*-${nat_test_string}-*; do
        fname=$(basename "$ipath")
        opath="${outdir}/${nat_test_string}/${fname}"
        if [ ! -f "${opath}" ]; then
            $JQ -c -S -M '(.test_keys.data_received[] as $d | ($d | del(.source_addr, .time_first)) + {"timestamp": $d.time_first, "remote_ip": $d.source_addr.host, "remote_port": $d.source_addr.port}) + { "alt_remotes": [ .test_keys.alt_remotes[] as {host: $h, port: $p} | $h + ":" + ($p | tostring) ] | sort, "remotes": [ .test_keys.remotes[] as {host: $h, port: $p} | $h + ":" + ($p | tostring) ] | sort, "local_ip": .test_keys.source_addr.host, "local_port": .test_keys.source_addr.port, "nat_type": .test_keys.nat_type | split(" ") } + (.test_keys | del(.source_addr, .data_received, .remotes, .alt_remotes, .nat_type)) + (. | del(.test_keys, .options, .annotations, .input_hashes, .test_helpers, .measurement_start_time, .test_start_time, .id, .input, .socksproxy, .agent))' "${ipath}" >"${opath}"
        fi
    done
}


cmd="$1"
test "$cmd" && shift

case "$cmd" in
    (nodes_history|nodes_addrs|nodes_cjdns_addrs|nodes_ocat_addrs|nodes_exec|data_pack|convert_ooni_json)
        $cmd "$@"
        ;;
    (*) echo "Usage: $(basename "$0") nodes_history|nodes_addrs|nodes_cjdns_addrs|nodes_ocat_addrs|nodes_exec|data_pack|convert_ooni_json ARG..." >&2  ##XXXX enhance
        exit 1
esac
